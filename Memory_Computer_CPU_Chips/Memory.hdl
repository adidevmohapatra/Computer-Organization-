// Adidev Mohapatra 230007601

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    //based of the notes that Dr.tyagi went over in the lecture 
    DMux4Way(in=load, sel[0..1]=address[13..14], a=e1, b=e2, c=e3, d=e4);
    //dmux takes in the one input to split into 4 outputs
    Or(a=e1, b=e2, out=g1);
    //or gate used to decide between a and b for the ram 16k
    RAM16K(in=in, load=g1, address[0..13]=address[0..13], out=out1);
    //this is if the address is 1, then it is ram16k
    Screen(in=in, load=e3, address[0..12]=address[0..12], out=out2);
    //this is if the address for the screen on 8k to see if the last address is 1
    Keyboard(out=out3);
    //the keyboard is the value 1 that we output
    Mux4Way16(a=out1, b=out1, c=out2, d=out3, sel[0..1]=address[13..14], out=out);
    //the mux takes the various inputs to give out one output
    


}