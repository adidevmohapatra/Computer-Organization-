// Adidev Mohapatra 230007601

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // bitwise not the x input?
        zy, // zero the y input?
        ny, // bitwise not the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // bitwise not the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

      
    Not16(in=x,out=xnot);///account for the x and not x variables by using not16 to find the not x and finding the final x
    Not16(in=y,out=ynot);///account for the y and not y variables by using not16 to find the not y and finding the final y
    Mux4Way16(a=x,b=xnot,c=false,d=true,sel[0]=nx,sel[1]=zx,out=xfinal); //to check for zero and bitwise not x
    Mux4Way16(a=y,b=ynot,c=false,d=true,sel[0]=ny,sel[1]=zy,out=yfinal);//to check for zero and bitwise not y
    And16(a=xfinal,b=yfinal,out=xandy);
    Add16(a=xfinal,b=yfinal,out=xplusy);
    Mux16(a=xandy,b=xplusy,sel=f,out=tempout); //make a mux16 with selection f to compute out the above
    //and16 and add16 are used for the x + y (if 1) or x & y (if 0)
    Not16(in=tempout,out=tempnotout);//makes condiion of 1 and 0 
    Mux16(a=tempout,b=tempnotout,sel=no,out=out,out[0..7]=c1,out[8..15]=c2,out[15]=ng);//tests condition for outputting and or add
    Or8Way(in=c1,out=d1);//Or is intriduced for the output of zr
    Or8Way(in=c2,out=d2);
    Or(a=d1,b=d2,out=oneininput); 
    Not(in=oneininput,out=zr);// last condition to fulfill the 1 if out is less than 0 or otherwise
}
